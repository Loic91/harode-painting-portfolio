{"version":3,"sources":["scss\\pages\\about.scss","..\\node_modules\\include-media\\dist\\_include-media.scss"],"names":[],"mappings":"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","file":"about.79b7ed39.css","sourceRoot":"..\\src","sourcesContent":["$breakpoints: (\r\n    'phone': 767px,\r\n    'tablet': 1025px,\r\n    'desktop': 1920px,\r\n    'big-desktop': 2570px,\r\n) !default;\r\n\r\n@import '../../../node_modules/include-media/dist/_include-media.scss';\r\n\r\n\r\n@font-face{\r\n  font-family: \"Dx-Sitrus\"; \r\n  src: url('../../fonts/FREE/DxSitrus-Expanded.otf') format('opentype');\r\n}\r\n\r\nbody {\r\n  font-weight: 300;\r\n  \r\n}\r\n\r\n.page {\r\n  overflow: hidden;\r\n  width: 100%;\r\n  //* RESPONSIVE\r\n  font-size: calc(100vw / 1920 * 10);\r\n}\r\n\r\nmain {\r\n    z-index: -1;\r\n  // ANIMATION DU BACKGROUND\r\n  &::before {\r\n    animation: grain 8s steps(10) infinite;\r\n        // background-color: #000002;\r\n\t\tbackground-image: url(../../medias/noise.png);\r\n\t\tcontent: '';\r\n\t\theight: 300%;\r\n\t\tleft: -50%;\r\n\t\topacity: 2.2;\r\n\t\tposition: fixed;\r\n\t\ttop: -100%;\r\n\t\twidth: 300%;\r\n\t\tpointer-events: none;\r\n  }\r\n\r\n  background-color: #000002;\r\n}\r\n\r\n/* Grainy texture animation by Geoff Graham https://css-tricks.com/snippets/css/animated-grainy-texture/ */\r\n@keyframes grain {\r\n  0%, 100% {\r\n    transform: translate(0, 0);\r\n  }\r\n\r\n  10% {\r\n    transform: translate(-5%, -10%);\r\n  }\r\n\r\n  20% {\r\n    transform: translate(-15%, 5%);\r\n  }\r\n\r\n  30% {\r\n    transform: translate(7%, -25%);\r\n  }\r\n\r\n  40% {\r\n    transform: translate(-5%, 25%);\r\n  }\r\n\r\n  50% {\r\n    transform: translate(-15%, 10%);\r\n  }\r\n\r\n  60% {\r\n    transform: translate(15%, 0%);\r\n  }\r\n\r\n  70% {\r\n    transform: translate(0%, 15%);\r\n  }\r\n\r\n  80% {\r\n    transform: translate(3%, 35%);\r\n  }\r\n\r\n  90% {\r\n    transform: translate(-10%, 10%);\r\n  }\r\n}\r\n\r\n//* Couleur menu\r\n.li a {\r\n    color: whitesmoke;\r\n}\r\n.li .btn{\r\n    color: whitesmoke;\r\n}\r\n\r\n.li .txt_folio{\r\n    cursor: default;\r\n}\r\n\r\n// sélection du menu par rapport à la taille de l'écran\r\nbody .desktop {\r\n\r\n    @include media(\"<tablet\") {\r\n      display: none;\r\n    }\r\n  \r\n    @include media(\"<phone\") {\r\n      display: none;\r\n    }\r\n  } \r\n  \r\n  body .mobile {\r\n\r\n    @include media('<big-desktop'){\r\n        display: none;\r\n    }\r\n  \r\n    @include media ('<desktop') {\r\n      display: none;\r\n    }\r\n  \r\n    @include media(\"<tablet\") {\r\n      display: block;\r\n    }\r\n  \r\n    @include media(\"<phone\") {\r\n      display: block;\r\n    }\r\n}\r\n\r\nsection {\r\n    height: 100vh;\r\n}\r\n\r\n.img-wrap, .img-wrap-2 {\r\n    display: flex;\r\n\r\n    @include media('<tablet') {\r\n        display: block;\r\n    }\r\n\r\n    @include media('<phone') {\r\n        display: block;\r\n    }\r\n}\r\n\r\n.bloc__txt {\r\n    \r\n    @include media('<big-desktop'){\r\n        max-width: 700px;\r\n        margin-left: 10vw;\r\n        margin-right: 25vw;\r\n        margin-top: 10vw;\r\n    }\r\n\r\n    @include media('<desktop'){\r\n        max-width: 700px;\r\n        margin-left: 10vw;\r\n        margin-right: 2vw;\r\n        margin-top: 5vw;\r\n    }\r\n\r\n    @include media('<tablet'){\r\n        margin: auto;\r\n        max-width: 500px;\r\n    }\r\n\r\n    @include media('<phone'){\r\n        margin: auto;\r\n        max-width: 350px;\r\n        margin-top: 30px;\r\n    }\r\n}\r\n.bloc__txt_2{\r\n    \r\n    @include media('<big-desktop'){\r\n        max-width: 970px;\r\n        margin-right: 15vw;\r\n        margin-top: 5vw;\r\n    }\r\n\r\n    @include media('<desktop'){\r\n        max-width: 700px;\r\n        margin-right: 10vw;\r\n        margin-top: 5vw;\r\n    }\r\n\r\n    @include media('<tablet'){\r\n        margin-left: auto;\r\n        margin-right: auto;\r\n        max-width: 500px;\r\n        margin-top: -530px;\r\n    }\r\n\r\n    @include media('<phone'){\r\n        margin: auto;\r\n        max-width: 350px;\r\n        margin-top: -250px;\r\n    }\r\n}\r\n\r\n.txt__title {\r\n    font-family: \"Dx-Sitrus\";\r\n    font-size: 8vw;\r\n    font-weight: lighter;\r\n    color: whitesmoke;\r\n\r\n    @include media('<phone'){\r\n        font-size: 12vw;\r\n    }\r\n}\r\n// Animation text\r\n// title\r\n.o-container {\r\n    // margin-right: auto;\r\n    // margin-left: auto;\r\n    max-width: 95rem;\r\n}\r\n.o-title {\r\n    // margin-top: 100px;\r\n    perspective: 600px;\r\n    -webkit-perspective: 600px;\r\n}\r\n.o-title_line {\r\n    display: block;\r\n    opacity: 0;\r\n    /* transform-origin: center top; */\r\n    transform-style: preserve-3d;\r\n    transform: translateY(100%) rotateX(-80deg);\r\n    transition: opacity 2.75s cubic-bezier(0.215, 0.61, 0.355, 1),\r\n    transform 2.75s cubic-bezier(0.215, 0.61, 0.355, 1);\r\n    // text-align: center;\r\n}\r\n.o-title.is-inview .o-title_line {\r\n    transform: none;\r\n    opacity: 1;\r\n}\r\n.o-title.is-inview .o-title_line:first-child {\r\n    transition-delay: .6s;\r\n    margin-bottom: 0px;\r\n}\r\n.o-title.is-inview .o-title_line:nth-child(2) {\r\n    transition-delay: 0.5s;\r\n    margin-bottom: 0px;\r\n}\r\n.o-title.is-inview .o-title_line:nth-child(3) {\r\n    transition-delay: 0.6s;\r\n}\r\n.o-title.is-inview .o-title_line:nth-child(4) {\r\n    transition-delay: 0.7s;\r\n}\r\n// ====================== Animation pragraphe 1\r\n.o-title_line__2 {\r\n    display: block;\r\n    opacity: 0;\r\n    /* transform-origin: center top; */\r\n    transform-style: preserve-3d;\r\n    transform: translateY(100%) rotateX(-80deg);\r\n    transition: opacity 3.8s cubic-bezier(0.215, 0.61, 0.355, 1),\r\n    transform 3.8s cubic-bezier(0.215, 0.61, 0.355, 1);\r\n    // text-align: center;\r\n}\r\n.o-title.is-inview .o-title_line__2 {\r\n    transform: none;\r\n    opacity: 1;\r\n}\r\n.o-title.is-inview .o-title_line__2:first-child {\r\n    transition-delay: .6s;\r\n    margin-bottom: 0px;\r\n}\r\n.o-title.is-inview .o-title_line__2:nth-child(2) {\r\n    transition-delay: 0.5s;\r\n    margin-bottom: 0px;\r\n}\r\n.o-title.is-inview .o-title_line__2:nth-child(3) {\r\n    transition-delay: 0.6s;\r\n}\r\n.o-title.is-inview .o-title_line__2:nth-child(4) {\r\n    transition-delay: 0.7s;\r\n}\r\n\r\n// ====================== Animation titre & pragraphe 2\r\n.o-title_line__3 {\r\n    display: block;\r\n    opacity: 0;\r\n    /* transform-origin: center top; */\r\n    transform-style: preserve-3d;\r\n    transform: translateY(100%) rotateX(-80deg);\r\n    transition: opacity 2.8s cubic-bezier(0.215, 0.61, 0.355, 1),\r\n    transform 2.8s cubic-bezier(0.215, 0.61, 0.355, 1);\r\n    // text-align: center;\r\n}\r\n.o-title.is-inview .o-title_line__3 {\r\n    transform: none;\r\n    opacity: 1;\r\n}\r\n.o-title.is-inview .o-title_line__3:first-child {\r\n    transition-delay: .6s;\r\n    margin-bottom: 0px;\r\n}\r\n.o-title.is-inview .o-title_line__3:nth-child(2) {\r\n    transition-delay: 0.5s;\r\n    margin-bottom: 0px;\r\n}\r\n.o-title.is-inview .o-title_line__3:nth-child(3) {\r\n    transition-delay: 0.6s;\r\n}\r\n.o-title.is-inview .o-title_line__3:nth-child(4) {\r\n    transition-delay: 0.7s;\r\n}\r\n\r\n// =============================================\r\n\r\n.txt__paragraph {\r\n    font-family: 'Roboto', sans-serif;\r\n    color: whitesmoke;\r\n    line-height: 0.9;\r\n    font-size: 3.3vw;\r\n\r\n    @include media('<big-desktop'){\r\n        font-size: 1vw;\r\n        width: 970px;\r\n    }\r\n\r\n    @include media('<desktop'){\r\n        font-size: 1.35vw;\r\n        max-width: 600px;\r\n    }\r\n\r\n    @include media('<tablet'){\r\n        font-size: 1.75vw;\r\n        line-height: 0.7;\r\n    }\r\n\r\n    @include media('<phone'){\r\n        font-size: 3.3vw;\r\n        line-height: 0.9;\r\n        max-width: 350px;\r\n    }\r\n}\r\n\r\n// .txt__caracteristics {\r\n//     font-size: 1.5vw;\r\n//     color: whitesmoke;\r\n//     max-width: 500px;\r\n//     margin-left: auto;\r\n//     margin-right: auto;\r\n//     margin-top: 150px;\r\n//     margin-bottom: 150px;\r\n// }\r\n\r\n.contact a {\r\n    color: whitesmoke;\r\n    text-decoration: none;\r\n    display: table-caption;\r\n}\r\n.contact {\r\n    font-family: \"Dx-Sitrus\";\r\n    margin-top: 50px;\r\n    font-size: 1.5vw;\r\n    line-height: 0.3;\r\n\r\n    @include media('<tablet'){\r\n        font-size: 1.8vw;\r\n        line-height: 0;\r\n    }\r\n\r\n    @include media('<phone'){\r\n        font-size: 5vw;\r\n        line-height: 0.1;\r\n    }\r\n}\r\n.contact span {\r\n    font-weight: bold;\r\n    margin: 5px;\r\n}\r\n.insta, .youtube {\r\n    margin-top: 5px;\r\n}\r\n\r\n// /* =========================================================== */\r\n.bottom {\r\n    // permet de placer le contenu en bas de page\r\n    position: absolute;\r\n    bottom: 0;\r\n  \r\n    // z-index: 99;\r\n    cursor: pointer;\r\n    display: inline-block;\r\n    width: 100%;\r\n}\r\n\r\n\r\n// ***************************************************************\r\n// image zoom\r\n// .section {\r\n//     @include media('<desktop'){\r\n//             display: none;\r\n//     }\r\n// }\r\n\r\n.s_img{\r\n    position: relative;\r\n    overflow: hidden;\r\n    max-height: 400px;\r\n    max-width: 350px;\r\n    text-align: center;\r\n    // display: flex;\r\n    margin-left: auto;\r\n    margin-right: auto;\r\n\r\n    @include media('<tablet'){\r\n        max-width: 500px;\r\n    }\r\n\r\n    @include media(\">tablet\", \"<=big-desktop\"){\r\n        display: none;\r\n    }\r\n\r\n    // @include media('<tablet'){\r\n    //     max-width: 700px;\r\n    // }\r\n\r\n    // @include media('<phone'){\r\n    //     max-height: 400px;\r\n    //     max-width: 350px;\r\n    //     text-align: center;\r\n    // }\r\n}\r\n    \r\n.wrap{\r\n    max-height: 600px;\r\n    width: 100%;\r\n    background-size: cover;\r\n\r\n    margin: auto;\r\n    margin-top: 50px;\r\n}\r\n\r\n.wrap_2{\r\n    max-height: 600px;\r\n    width: 100%;\r\n    background-size: cover;\r\n\r\n    margin: auto;\r\n    margin-top: 50px;\r\n}\r\n\r\n\r\n.content-inner {\r\n    max-width: 980px;\r\n    margin-left: auto;\r\n    margin-right: auto;\r\n    margin-bottom: 50px;\r\n}\r\n\r\n// =========================================================\r\n\r\n.bottom__2 .btn{\r\n    margin-top: 100px;\r\n}\r\n\r\n\r\n\r\n// ****************************************************************\r\n// WebGL\r\n#canvas {\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 100vh;\r\n    z-index: 2;\r\n  \r\n    /* avoid pointer events on canvas */\r\n    pointer-events: none;\r\n}\r\n\r\n.showcase-curtain {\r\n    position: absolute;\r\n    top: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    left: 0;\r\n\r\n    \r\n    z-index: 2;\r\n\r\n    @include media('<big-desktop'){\r\n        width: 650px;\r\n        height: 450px;\r\n        margin-top: 7vw;\r\n    }\r\n\r\n    @include media('<desktop'){\r\n        width: 550px;\r\n        height: 400px;\r\n        margin-top: 5vw;\r\n    }\r\n\r\n    @include media('<tablet'){\r\n        display: none;\r\n    }\r\n\r\n    @include media('<phone'){\r\n        display: none;\r\n    }\r\n}\r\n\r\n.showcase-2 {\r\n    z-index: 2;\r\n\r\n    @include media('<big-desktop'){\r\n        margin-left: 10vw;\r\n        // margin-top: -15vw;\r\n        width: 650px;\r\n        height: 450px;\r\n    }\r\n\r\n    @include media('<desktop'){\r\n        margin-left: 5vw;\r\n        width: 550px;\r\n        height: 350px;\r\n    }\r\n\r\n    @include media('<tablet'){\r\n        // margin-top: 450px;\r\n        max-width: 450px;\r\n        max-height: 350px;\r\n    }\r\n\r\n    @include media('<phone'){\r\n        // margin-top: 320px;\r\n        max-width: 280px;\r\n        max-height: 230px;\r\n    }\r\n}\r\n\r\n.showcase-curtain img {\r\n    display: none;\r\n}\r\n\r\n.websites-examples-gallery {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    justify-content: space-between;\r\n    margin: 0 -10px;\r\n}\r\n\r\n.website-example-item {\r\n    flex-basis: 70%;\r\n    overflow: hidden;\r\n    box-sizing: border-box;\r\n}\r\n\r\n\r\n.website-example-cover {\r\n    position: relative;\r\n    width: 100%;\r\n    height: 0;\r\n    overflow: hidden;\r\n    padding-bottom: 56.833%;\r\n}\r\n\r\n.website-example-cover img {\r\n    opacity: 0;\r\n}\r\n\r\n.website-example-item {\r\n    flex-basis: 70%;\r\n    overflow: hidden;\r\n    box-sizing: border-box;\r\n}\r\n\r\n\r\n/*** handling errors ***/\r\n\r\n.no-curtains .website-example-cover img {\r\n    opacity: 1;\r\n    display: block;\r\n    width: 100%;\r\n    height: auto;\r\n}\r\n\r\n.no-curtains .showcase-curtain img {\r\n    display: block;\r\n}","@charset \"UTF-8\";\n\n//     _            _           _                           _ _\n//    (_)          | |         | |                         | (_)\n//     _ _ __   ___| |_   _  __| | ___   _ __ ___   ___  __| |_  __ _\n//    | | '_ \\ / __| | | | |/ _` |/ _ \\ | '_ ` _ \\ / _ \\/ _` | |/ _` |\n//    | | | | | (__| | |_| | (_| |  __/ | | | | | |  __/ (_| | | (_| |\n//    |_|_| |_|\\___|_|\\__,_|\\__,_|\\___| |_| |_| |_|\\___|\\__,_|_|\\__,_|\n//\n//      Simple, elegant and maintainable media queries in Sass\n//                        v1.4.9\n//\n//        https://eduardoboucas.github.io/include-media\n//\n//         Authors: Eduardo Boucas (@eduardoboucas)\n//                  Kitty Giraudel (@kittygiraudel)\n//\n//      This project is licensed under the terms of the MIT license\n////\n/// include-media library public configuration\n/// @author Eduardo Boucas\n/// @access public\n////\n\n\n///\n/// Creates a list of global breakpoints\n///\n/// @example scss - Creates a single breakpoint with the label `phone`\n///  $breakpoints: ('phone': 320px);\n///\n$breakpoints: (\n  'phone': 320px,\n  'tablet': 768px,\n  'desktop': 1024px\n) !default;\n\n\n///\n/// Creates a list of static expressions or media types\n///\n/// @example scss - Creates a single media type (screen)\n///  $media-expressions: ('screen': 'screen');\n///\n/// @example scss - Creates a static expression with logical disjunction (OR operator)\n///  $media-expressions: (\n///    'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)'\n///  );\n///\n$media-expressions: (\n  'screen': 'screen',\n  'print': 'print',\n  'handheld': 'handheld',\n  'landscape': '(orientation: landscape)',\n  'portrait': '(orientation: portrait)',\n  'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi), (min-resolution: 2dppx)',\n  'retina3x': '(-webkit-min-device-pixel-ratio: 3), (min-resolution: 350dpi), (min-resolution: 3dppx)'\n) !default;\n\n\n///\n/// Defines a number to be added or subtracted from each unit when declaring breakpoints with exclusive intervals\n///\n/// @example scss - Interval for pixels is defined as `1` by default\n///  @include media('>128px') {}\n///\n///  /* Generates: */\n///  @media (min-width: 129px) {}\n///\n/// @example scss - Interval for ems is defined as `0.01` by default\n///  @include media('>20em') {}\n///\n///  /* Generates: */\n///  @media (min-width: 20.01em) {}\n///\n/// @example scss - Interval for rems is defined as `0.1` by default, to be used with `font-size: 62.5%;`\n///  @include media('>2.0rem') {}\n///\n///  /* Generates: */\n///  @media (min-width: 2.1rem) {}\n///\n$unit-intervals: (\n  'px': 1,\n  'em': 0.01,\n  'rem': 0.1,\n  '': 0\n) !default;\n\n///\n/// Defines whether support for media queries is available, useful for creating separate stylesheets\n/// for browsers that don't support media queries.\n///\n/// @example scss - Disables support for media queries\n///  $im-media-support: false;\n///  @include media('>=tablet') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* Generates: */\n///  .foo {\n///    color: tomato;\n///  }\n///\n$im-media-support: true !default;\n\n///\n/// Selects which breakpoint to emulate when support for media queries is disabled. Media queries that start at or\n/// intercept the breakpoint will be displayed, any others will be ignored.\n///\n/// @example scss - This media query will show because it intercepts the static breakpoint\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  @include media('>=tablet') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* Generates: */\n///  .foo {\n///    color: tomato;\n///  }\n///\n/// @example scss - This media query will NOT show because it does not intercept the desktop breakpoint\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'tablet';\n///  @include media('>=desktop') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* No output */\n///\n$im-no-media-breakpoint: 'desktop' !default;\n\n///\n/// Selects which media expressions are allowed in an expression for it to be used when media queries\n/// are not supported.\n///\n/// @example scss - This media query will show because it intercepts the static breakpoint and contains only accepted media expressions\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  $im-no-media-expressions: ('screen');\n///  @include media('>=tablet', 'screen') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///   /* Generates: */\n///   .foo {\n///     color: tomato;\n///   }\n///\n/// @example scss - This media query will NOT show because it intercepts the static breakpoint but contains a media expression that is not accepted\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  $im-no-media-expressions: ('screen');\n///  @include media('>=tablet', 'retina2x') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* No output */\n///\n$im-no-media-expressions: ('screen', 'portrait', 'landscape') !default;\n\n////\n/// Cross-engine logging engine\n/// @author Kitty Giraudel\n/// @access private\n////\n\n\n///\n/// Log a message either with `@error` if supported\n/// else with `@warn`, using `feature-exists('at-error')`\n/// to detect support.\n///\n/// @param {String} $message - Message to log\n///\n@function im-log($message) {\n  @if feature-exists('at-error') {\n    @error $message;\n  } @else {\n    @warn $message;\n    $_: noop();\n  }\n\n  @return $message;\n}\n\n\n///\n/// Wrapper mixin for the log function so it can be used with a more friendly\n/// API than `@if im-log('..') {}` or `$_: im-log('..')`. Basically, use the function\n/// within functions because it is not possible to include a mixin in a function\n/// and use the mixin everywhere else because it's much more elegant.\n///\n/// @param {String} $message - Message to log\n///\n@mixin log($message) {\n  @if im-log($message) {}\n}\n\n\n///\n/// Function with no `@return` called next to `@warn` in Sass 3.3\n/// to trigger a compiling error and stop the process.\n///\n@function noop() {}\n\n///\n/// Determines whether a list of conditions is intercepted by the static breakpoint.\n///\n/// @param {Arglist}   $conditions  - Media query conditions\n///\n/// @return {Boolean} - Returns true if the conditions are intercepted by the static breakpoint\n///\n@function im-intercepts-static-breakpoint($conditions...) {\n  $no-media-breakpoint-value: map-get($breakpoints, $im-no-media-breakpoint);\n\n  @if not $no-media-breakpoint-value {\n    @if im-log('`#{$im-no-media-breakpoint}` is not a valid breakpoint.') {}\n  }\n\n  @each $condition in $conditions {\n    @if not map-has-key($media-expressions, $condition) {\n      $operator: get-expression-operator($condition);\n      $prefix: get-expression-prefix($operator);\n      $value: get-expression-value($condition, $operator);\n\n      @if ($prefix == 'max' and $value <= $no-media-breakpoint-value) or\n          ($prefix == 'min' and $value > $no-media-breakpoint-value) {\n        @return false;\n      }\n    } @else if not index($im-no-media-expressions, $condition) {\n      @return false;\n    }\n  }\n\n  @return true;\n}\n\n////\n/// Parsing engine\n/// @author Kitty Giraudel\n/// @access private\n////\n\n\n///\n/// Get operator of an expression\n///\n/// @param {String} $expression - Expression to extract operator from\n///\n/// @return {String} - Any of `>=`, `>`, `<=`, `<`, `≥`, `≤`\n///\n@function get-expression-operator($expression) {\n  @each $operator in ('>=', '>', '<=', '<', '≥', '≤') {\n    @if str-index($expression, $operator) {\n      @return $operator;\n    }\n  }\n\n  // It is not possible to include a mixin inside a function, so we have to\n  // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\n  // functions cannot be called anywhere in Sass, we need to hack the call in\n  // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\n  // Sass 3.3, change this line in `@if im-log(..) {}` instead.\n  $_: im-log('No operator found in `#{$expression}`.');\n}\n\n\n///\n/// Get dimension of an expression, based on a found operator\n///\n/// @param {String} $expression - Expression to extract dimension from\n/// @param {String} $operator - Operator from `$expression`\n///\n/// @return {String} - `width` or `height` (or potentially anything else)\n///\n@function get-expression-dimension($expression, $operator) {\n  $operator-index: str-index($expression, $operator);\n  $parsed-dimension: str-slice($expression, 0, $operator-index - 1);\n  $dimension: 'width';\n\n  @if str-length($parsed-dimension) > 0 {\n    $dimension: $parsed-dimension;\n  }\n\n  @return $dimension;\n}\n\n\n///\n/// Get dimension prefix based on an operator\n///\n/// @param {String} $operator - Operator\n///\n/// @return {String} - `min` or `max`\n///\n@function get-expression-prefix($operator) {\n  @return if(index(('<', '<=', '≤'), $operator), 'max', 'min');\n}\n\n\n///\n/// Get value of an expression, based on a found operator\n///\n/// @param {String} $expression - Expression to extract value from\n/// @param {String} $operator - Operator from `$expression`\n///\n/// @return {Number} - A numeric value\n///\n@function get-expression-value($expression, $operator) {\n  $operator-index: str-index($expression, $operator);\n  $value: str-slice($expression, $operator-index + str-length($operator));\n\n  @if map-has-key($breakpoints, $value) {\n    $value: map-get($breakpoints, $value);\n  } @else {\n    $value: to-number($value);\n  }\n\n  $interval: map-get($unit-intervals, unit($value));\n\n  @if not $interval {\n    // It is not possible to include a mixin inside a function, so we have to\n    // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\n    // functions cannot be called anywhere in Sass, we need to hack the call in\n    // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\n    // Sass 3.3, change this line in `@if im-log(..) {}` instead.\n    $_: im-log('Unknown unit `#{unit($value)}`.');\n  }\n\n  @if $operator == '>' {\n    $value: $value + $interval;\n  } @else if $operator == '<' {\n    $value: $value - $interval;\n  }\n\n  @return $value;\n}\n\n\n///\n/// Parse an expression to return a valid media-query expression\n///\n/// @param {String} $expression - Expression to parse\n///\n/// @return {String} - Valid media query\n///\n@function parse-expression($expression) {\n  // If it is part of $media-expressions, it has no operator\n  // then there is no need to go any further, just return the value\n  @if map-has-key($media-expressions, $expression) {\n    @return map-get($media-expressions, $expression);\n  }\n\n  $operator: get-expression-operator($expression);\n  $dimension: get-expression-dimension($expression, $operator);\n  $prefix: get-expression-prefix($operator);\n  $value: get-expression-value($expression, $operator);\n\n  @return '(#{$prefix}-#{$dimension}: #{$value})';\n}\n\n///\n/// Slice `$list` between `$start` and `$end` indexes\n///\n/// @access private\n///\n/// @param {List} $list - List to slice\n/// @param {Number} $start [1] - Start index\n/// @param {Number} $end [length($list)] - End index\n///\n/// @return {List} Sliced list\n///\n@function slice($list, $start: 1, $end: length($list)) {\n  @if length($list) < 1 or $start > $end {\n    @return ();\n  }\n\n  $result: ();\n\n  @for $i from $start through $end {\n    $result: append($result, nth($list, $i));\n  }\n\n  @return $result;\n}\n\n////\n/// String to number converter\n/// @author Kitty Giraudel\n/// @access private\n////\n\n\n///\n/// Casts a string into a number\n///\n/// @param {String | Number} $value - Value to be parsed\n///\n/// @return {Number}\n///\n@function to-number($value) {\n  @if type-of($value) == 'number' {\n    @return $value;\n  } @else if type-of($value) != 'string' {\n    $_: im-log('Value for `to-number` should be a number or a string.');\n  }\n\n  $first-character: str-slice($value, 1, 1);\n  $result: 0;\n  $digits: 0;\n  $minus: ($first-character == '-');\n  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);\n\n  // Remove +/- sign if present at first character\n  @if ($first-character == '+' or $first-character == '-') {\n    $value: str-slice($value, 2);\n  }\n\n  @for $i from 1 through str-length($value) {\n    $character: str-slice($value, $i, $i);\n\n    @if not (index(map-keys($numbers), $character) or $character == '.') {\n      @return to-length(if($minus, -$result, $result), str-slice($value, $i))\n    }\n\n    @if $character == '.' {\n      $digits: 1;\n    } @else if $digits == 0 {\n      $result: $result * 10 + map-get($numbers, $character);\n    } @else {\n      $digits: $digits * 10;\n      $result: $result + map-get($numbers, $character) / $digits;\n    }\n  }\n\n  @return if($minus, -$result, $result);\n}\n\n\n///\n/// Add `$unit` to `$value`\n///\n/// @param {Number} $value - Value to add unit to\n/// @param {String} $unit - String representation of the unit\n///\n/// @return {Number} - `$value` expressed in `$unit`\n///\n@function to-length($value, $unit) {\n  $units: ('px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax);\n\n  @if not index(map-keys($units), $unit) {\n    $_: im-log('Invalid unit `#{$unit}`.');\n  }\n\n  @return $value * map-get($units, $unit);\n}\n\n///\n/// This mixin aims at redefining the configuration just for the scope of\n/// the call. It is helpful when having a component needing an extended\n/// configuration such as custom breakpoints (referred to as tweakpoints)\n/// for instance.\n///\n/// @author Kitty Giraudel\n///\n/// @param {Map} $tweakpoints [()] - Map of tweakpoints to be merged with `$breakpoints`\n/// @param {Map} $tweak-media-expressions [()] - Map of tweaked media expressions to be merged with `$media-expression`\n///\n/// @example scss - Extend the global breakpoints with a tweakpoint\n///  @include media-context(('custom': 678px)) {\n///    .foo {\n///      @include media('>phone', '<=custom') {\n///       // ...\n///      }\n///    }\n///  }\n///\n/// @example scss - Extend the global media expressions with a custom one\n///  @include media-context($tweak-media-expressions: ('all': 'all')) {\n///    .foo {\n///      @include media('all', '>phone') {\n///       // ...\n///      }\n///    }\n///  }\n///\n/// @example scss - Extend both configuration maps\n///  @include media-context(('custom': 678px), ('all': 'all')) {\n///    .foo {\n///      @include media('all', '>phone', '<=custom') {\n///       // ...\n///      }\n///    }\n///  }\n///\n@mixin media-context($tweakpoints: (), $tweak-media-expressions: ()) {\n  // Save global configuration\n  $global-breakpoints: $breakpoints;\n  $global-media-expressions: $media-expressions;\n\n  // Update global configuration\n  $breakpoints: map-merge($breakpoints, $tweakpoints) !global;\n  $media-expressions: map-merge($media-expressions, $tweak-media-expressions) !global;\n\n  @content;\n\n  // Restore global configuration\n  $breakpoints: $global-breakpoints !global;\n  $media-expressions: $global-media-expressions !global;\n}\n\n////\n/// include-media public exposed API\n/// @author Eduardo Boucas\n/// @access public\n////\n\n\n///\n/// Generates a media query based on a list of conditions\n///\n/// @param {Arglist}   $conditions  - Media query conditions\n///\n/// @example scss - With a single set breakpoint\n///  @include media('>phone') { }\n///\n/// @example scss - With two set breakpoints\n///  @include media('>phone', '<=tablet') { }\n///\n/// @example scss - With custom values\n///  @include media('>=358px', '<850px') { }\n///\n/// @example scss - With set breakpoints with custom values\n///  @include media('>desktop', '<=1350px') { }\n///\n/// @example scss - With a static expression\n///  @include media('retina2x') { }\n///\n/// @example scss - Mixing everything\n///  @include media('>=350px', '<tablet', 'retina3x') { }\n///\n@mixin media($conditions...) {\n  @if ($im-media-support and length($conditions) == 0) or\n      (not $im-media-support and im-intercepts-static-breakpoint($conditions...)) {\n    @content;\n  } @else if ($im-media-support and length($conditions) > 0) {\n    @media #{unquote(parse-expression(nth($conditions, 1)))} {\n      // Recursive call\n      @include media(slice($conditions, 2)...) {\n        @content;\n      }\n    }\n  }\n}\n"]}